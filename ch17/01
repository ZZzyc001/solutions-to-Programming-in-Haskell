-- solution1
import Prelude hiding (Maybe, Just, Nothing, fail)
data Expr = Val Int | Add Expr Expr | Throw | Catch Expr Expr

data Maybe a = Just a | Nothing

eval             :: Expr -> Maybe Int
eval (Val n)     = Just n
eval (Add x y)   = case eval x of
                    Just n  -> case eval y of
                                Just m  -> Just (n + m)
                                Nothing -> Nothing
                    Nothing -> Nothing
eval Throw       = Nothing
eval (Catch x h) = case eval x of
                    Just n  -> Just n
                    Nothing -> eval h
                    
-- exec (comp' x c) s = case eval x of
--                          Just n  -> exec c (VAL n : s)
--                          Nothing -> fail s

--   exec (comp' (Val n) c) s
-- =    { specification exec }
--   exec c (VAL n : s)
-- =    { define: exec (PUSH n c) s = exec c (VAL n : s) }
--   exec (PUSH n c) s

--   exec (comp' Throw c) s
-- =    { specification exec }
--   fail s
-- =    { define: exec FAIL s = fail s}
--   exec FAIL s

--   exec (comp' (Add x y) c) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec c (VAL (n + m) : s)
--                      Nothing -> fail s
--      Nothing -> fail s
-- =    { define: exec (ADD c) (VAL m : VAL n : s) = exec c (VAL (n + m) : s) }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec (ADD c) (VAL m : VAL n : s)
--                      Nothing -> fail s
--      Nothing -> fail s
-- =    { define: fail (VAL n : s) = fail s }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec (ADD c) (VAL m : VAL n : s)
--                      Nothing -> fail (VAL n : s)
--      Nothing -> fail s
-- =    { induction hypothesis for y }
--   case eval x of
--      Just n  -> exec (comp' y (ADD c)) (VAL n : s)
--      Nothing -> fail s
-- =    { infuction hypothesis for x }
--   exec (comp' x (comp' y (ADD c))) s

--   exec (comp' (Catch x h) c) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> case eval h of
--                      Just m  -> exec c (VAL m : s)
--                      Nothing -> fail s
-- =    { induction hypothesis for h }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> exec (comp' h c) s
-- =    { define: fail (HAN c' : s) = exec c' s }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> fail (HAN (comp' h c) : s)
-- =    { define: exec (UNMARK c) (VAL n : HAN _ : s) = exec c (VAL n : s) }
--   case eval x of
--      Just n  -> exec (UNMARK c) (VAL n : HAN (comp' h c) : s)
--      Nothing -> fail (HAN (comp' h c) : s)
-- =    { induction hyppothesis for x }
--   exec (comp' x (UNMARK c)) (HAN (comp' h c) : s)
-- =    { define: exec (MARK c' c) s = exec c (HAN c' : s) }
--   exec (MARK (comp' h c) (comp' x (UNMARK c))) s

-- exec (comp x) s = case eval x of
--                      Just n  -> VAL n : s
--                      Nothing -> fail s

--   exec (comp x) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> VAL n : s
--      Nothing -> fail s
-- =    { define: exec HALT s = s }
--   case eval x of
--      Just n  -> exec HALT (VAL n : s)
--      Nothing -> fail s
-- =    { specification exec }
--   exec (comp' x HALT) s

data Code = HALT | PUSH Int Code  | ADD Code |
            FAIL | MARK Code Code | UNMARK Code

comp   :: Expr -> Code
comp x = comp' x HALT

comp'               :: Expr -> Code -> Code
comp' (Val n)     c = PUSH n c
comp' (Add x y)   c = comp' x (comp' y (ADD c))
comp' Throw       _ = FAIL
comp' (Catch x h) c = MARK (comp' h c) (comp' x (UNMARK c))

type Stack = [Elem]

data Elem = VAL Int | HAN Code

exec                                 :: Code -> Stack -> Stack
exec HALT        s                   = s
exec (PUSH n c)  s                   = exec c (VAL n : s)
exec (ADD c)     (VAL m : VAL n : s) = exec c (VAL (n + m) : s)
exec FAIL        s                   = fail s
exec (MARK c' c) s                   = exec c (HAN c' : s)
exec (UNMARK c)  (VAL n : HAN _ : s) = exec c (VAL n : s)

fail             :: Stack -> Stack
fail []          = []
fail (VAL _ : s) = fail s
fail (HAN c : s) = exec c s


-- solution2
import Prelude hiding (Maybe, Just, Nothing, fail)
data Expr = Val Int | Add Expr Expr | Throw | Catch Expr Expr

data Maybe a = Just a | Nothing

eval             :: Expr -> Maybe Int
eval (Val n)     = Just n
eval (Add x y)   = case eval x of
                    Just n  -> case eval y of
                                Just m  -> Just (n + m)
                                Nothing -> Nothing
                    Nothing -> Nothing
eval Throw       = Nothing
eval (Catch x h) = case eval x of
                    Just n  -> Just n
                    Nothing -> eval h

-- comp' :: Expr -> Code -> Code -> Code

-- type Stack = [Elem]

-- data Elem = VAL Int

-- exec (comp' x sc fc) s = case eval x of
--                              Just n  -> exec sc (VAL n : s)
--                              Nothing -> exec fc s

--   exec (comp' (Val n) sc fc) s
-- =    { specification exec }
--   exec sc (VAL n : s)
-- =    { define: exec (PUSH n c) s = exec c (VAL n : s) }
--   exec (PUSH n sc) s

--   exec (comp' Throw sc fc) s
-- =    { specification exec }
--   exec fc s

--   exec (comp' (Catch x h) sc fc) s
-- =    { secification exec }
--   case eval x of
--      Just n  -> exec sc (VAL n : s)
--      Nothing -> case h of
--                  Just m  -> exec sc (VAL m : s)
--                  Nothing -> exec fc s
-- =    { induction hypothesis for h }
--   case eval x of
--      Just n  -> exec sc (VAL n : s)
--      Nothing -> exec (comp' h sc fc) s
-- =    {induction hypothesis for x }
--   exec (comp' x sc (comp' h sc fc)) s

--   exec (comp' (Add x y) sc fc) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> case eval y of
--                  Just m  -> exec (ADD sc) (VAL m : VAL n : s)
--                  Nothing -> exec fc s
--      Nothing -> exec fc s
-- =    { define: exec (POP c) (VAL _ : s) = exec c s }
--   case eval x of
--      Just n  -> case eval y of
--                  Just m  -> exec (ADD sc) (VAL m : VAL n : s)
--                  Nothing -> exec (POP fc) (VAL n : s)
--      Nothing -> exec fc s
-- =    { induction hypothesis for y }
--   case eval x of
--      Just n  -> exec (comp' y (ADD sc) (POP fc) (VAL n : s))
--      Nothing -> exec fc s
-- =    { induction hypothesis for x}
--   exec (comp' x (comp' y (ADD sc) (POP fc)) fc) s

-- exec (comp x) s = case eval x of
--                      Just n  -> VAL n : s
--                      Nothing -> s

--   exec (comp x) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> VAL n : s
--      Nothing -> s
-- =    { define: exec HALT s = s }
--   case eval x of
--      Just n  -> exec HALT (VAL n : s)
--      Nothing -> exec HALT s
-- =    { specification exec }
--   exec (comp' x HALT HALT) s

data Code = HALT | PUSH Int Code | ADD Code | POP Code

type Stack = [Elem]

data Elem = VAL Int

comp   :: Expr -> Code
comp x = comp' x HALT HALT

comp'                   :: Expr -> Code -> Code -> Code
comp' (Val   n)   sc _  = PUSH n sc
comp' (Add   x y) sc fc = comp' x (comp' y (ADD sc) (POP fc)) fc
comp' Throw       _  fc = fc
comp' (Catch x h) sc fc = comp' x sc (comp' h sc fc)

exec                                :: Code -> Stack -> Stack
exec HALT       s                   = s
exec (PUSH n c) s                   = exec c (VAL n : s)
exec (ADD c)    (VAL m : VAL n : s) = exec c (VAL (n + m) : s)
exec (POP c)    (VAL _ : s)         = exec c s
