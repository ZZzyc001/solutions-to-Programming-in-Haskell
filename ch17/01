-- solution1
import Prelude hiding (Maybe, Just, Nothing, fail)
data Expr = Val Int | Add Expr Expr | Throw | Catch Expr Expr

data Maybe a = Just a | Nothing

eval             :: Expr -> Maybe Int
eval (Val n)     = Just n
eval (Add x y)   = case eval x of
                    Just n  -> case eval y of
                                Just m  -> Just (n + m)
                                Nothing -> Nothing
                    Nothing -> Nothing
eval Throw       = Nothing
eval (Catch x h) = case eval x of
                    Just n  -> Just n
                    Nothing -> eval h
                    
-- exec (comp' x c) s = case eval x of
--                          Just n  -> exec c (VAL n : s)
--                          Nothing -> fail s

--   exec (comp' (Val n) c) s
-- =    { specification exec }
--   exec c (VAL n : s)
-- =    { define: exec (PUSH n c) s = exec c (VAL n : s) }
--   exec (PUSH n c) s

--   exec (comp' Throw c) s
-- =    { specification exec }
--   fail s
-- =    { define: exec FAIL s = fail s}
--   exec FAIL s

--   exec (comp' (Add x y) c) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec c (VAL (n + m) : s)
--                      Nothing -> fail s
--      Nothing -> fail s
-- =    { define: exec (ADD c) (VAL m : VAL n : s) = exec c (VAL (n + m) : s) }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec (ADD c) (VAL m : VAL n : s)
--                      Nothing -> fail s
--      Nothing -> fail s
-- =    { define: fail (VAL n : s) = fail s }
--   case eval x of
--      Just n  -> case eval y of
--                      Just m  -> exec (ADD c) (VAL m : VAL n : s)
--                      Nothing -> fail (VAL n : s)
--      Nothing -> fail s
-- =    { induction hypothesis for y }
--   case eval x of
--      Just n  -> exec (comp' y (ADD c)) (VAL n : s)
--      Nothing -> fail s
-- =    { infuction hypothesis for x }
--   exec (comp' x (comp' y (ADD c))) s

--   exec (comp' (Catch x h) c) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> case eval h of
--                      Just m  -> exec c (VAL m : s)
--                      Nothing -> fail s
-- =    { induction hypothesis for h }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> exec (comp' h c) s
-- =    { define: fail (HAN c' : s) = exec c' s }
--   case eval x of
--      Just n  -> exec c (VAL n : s)
--      Nothing -> fail (HAN (comp' h c) : s)
-- =    { define: exec (UNMARK c) (VAL n : HAN _ : s) = exec c (VAL n : s) }
--   case eval x of
--      Just n  -> exec (UNMARK c) (VAL n : HAN (comp' h c) : s)
--      Nothing -> fail (HAN (comp' h c) : s)
-- =    { induction hyppothesis for x }
--   exec (comp' x (UNMARK c)) (HAN (comp' h c) : s)
-- =    { define: exec (MARK c' c) s = exec c (HAN c' : s) }
--   exec (MARK (comp' h c) (comp' x (UNMARK c))) s

-- exec (comp x) s = case eval x of
--                      Just n  -> VAL n : s
--                      Nothing -> fail s

--   exec (comp x) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> VAL n : s
--      Nothing -> fail s
-- =    { define: exec HALT s = s }
--   case eval x of
--      Just n  -> exec HALT (VAL n : s)
--      Nothing -> fail s
-- =    { specification exec }
--   exec (comp' x HALT) s

data Code = HALT | PUSH Int Code  | ADD Code |
            FAIL | MARK Code Code | UNMARK Code

comp   :: Expr -> Code
comp x = comp' x HALT

comp'               :: Expr -> Code -> Code
comp' (Val n)     c = PUSH n c
comp' (Add x y)   c = comp' x (comp' y (ADD c))
comp' Throw       _ = FAIL
comp' (Catch x h) c = MARK (comp' h c) (comp' x (UNMARK c))

type Stack = [Elem]

data Elem = VAL Int | HAN Code

exec                                 :: Code -> Stack -> Stack
exec HALT        s                   = s
exec (PUSH n c)  s                   = exec c (VAL n : s)
exec (ADD c)     (VAL m : VAL n : s) = exec c (VAL (n + m) : s)
exec FAIL        s                   = fail s
exec (MARK c' c) s                   = exec c (HAN c' : s)
exec (UNMARK c)  (VAL n : HAN _ : s) = exec c (VAL n : s)

fail             :: Stack -> Stack
fail []          = []
fail (VAL _ : s) = fail s
fail (HAN c : s) = exec c s


-- solution2
import Prelude hiding (Maybe, Just, Nothing, fail)
data Expr = Val Int | Add Expr Expr | Throw | Catch Expr Expr

data Maybe a = Just a | Nothing

eval             :: Expr -> Maybe Int
eval (Val n)     = Just n
eval (Add x y)   = case eval x of
                    Just n  -> case eval y of
                                Just m  -> Just (n + m)
                                Nothing -> Nothing
                    Nothing -> Nothing
eval Throw       = Nothing
eval (Catch x h) = case eval x of
                    Just n  -> Just n
                    Nothing -> eval h

-- comp' :: Expr -> Code -> Code -> Code

-- type Stack = [Elem]

-- data Elem = VAL Int

-- exec (comp' x sc fc) s = case eval x of
--                              Just n  -> exec sc (VAL n : s)
--                              Nothing -> exec fc s

--   exec (comp' (Val n) sc fc) s
-- =    { specification exec }
--   exec sc (VAL n : s)
-- =    { define: exec (PUSH n c) s = exec c (VAL n : s) }
--   exec (PUSH n sc) s

--   exec (comp' Throw sc fc) s
-- =    { specification exec }
--   exec fc s

--   exec (comp' (Catch x h) sc fc) s
-- =    { secification exec }
--   case eval x of
--      Just n  -> exec sc (VAL n : s)
--      Nothing -> case h of
--                  Just m  -> exec sc (VAL m : s)
--                  Nothing -> exec fc s
-- =    { induction hypothesis for h }
--   case eval x of
--      Just n  -> exec sc (VAL n : s)
--      Nothing -> exec (comp' h sc fc) s
-- =    {induction hypothesis for x }
--   exec (comp' x sc (comp' h sc fc)) s

--   exec (comp' (Add x y) sc fc) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> case eval y of
--                  Just m  -> exec (ADD sc) (VAL m : VAL n : s)
--                  Nothing -> exec fc s
--      Nothing -> exec fc s
-- =    { define: exec (POP c) (VAL _ : s) = exec c s }
--   case eval x of
--      Just n  -> case eval y of
--                  Just m  -> exec (ADD sc) (VAL m : VAL n : s)
--                  Nothing -> exec (POP fc) (VAL n : s)
--      Nothing -> exec fc s
-- =    { induction hypothesis for y }
--   case eval x of
--      Just n  -> exec (comp' y (ADD sc) (POP fc) (VAL n : s))
--      Nothing -> exec fc s
-- =    { induction hypothesis for x}
--   exec (comp' x (comp' y (ADD sc) (POP fc)) fc) s

-- exec (comp x) s = case eval x of
--                      Just n  -> VAL n : s
--                      Nothing -> s

--   exec (comp x) s
-- =    { specification exec }
--   case eval x of
--      Just n  -> VAL n : s
--      Nothing -> s
-- =    { define: exec HALT s = s }
--   case eval x of
--      Just n  -> exec HALT (VAL n : s)
--      Nothing -> exec HALT s
-- =    { specification exec }
--   exec (comp' x HALT HALT) s

data Code = HALT | PUSH Int Code | ADD Code | POP Code

type Stack = [Elem]

data Elem = VAL Int

comp   :: Expr -> Code
comp x = comp' x HALT HALT

comp'                   :: Expr -> Code -> Code -> Code
comp' (Val   n)   sc _  = PUSH n sc
comp' (Add   x y) sc fc = comp' x (comp' y (ADD sc) (POP fc)) fc
comp' Throw       _  fc = fc
comp' (Catch x h) sc fc = comp' x sc (comp' h sc fc)

exec                                :: Code -> Stack -> Stack
exec HALT       s                   = s
exec (PUSH n c) s                   = exec c (VAL n : s)
exec (ADD c)    (VAL m : VAL n : s) = exec c (VAL (n + m) : s)
exec (POP c)    (VAL _ : s)         = exec c s

-- solution3
import Prelude hiding (Maybe, Just, Nothing, fail)

type State = Int

data Expr = Val Int | Add Expr Expr | Throw | Catch Expr Expr | Get | Put Expr Expr

data Maybe a = Just a | Nothing

eval               :: Expr -> State -> (Maybe Int, State)
eval (Val   n)   q = (Just n, q)
eval (Add   x y) q = case eval x q of
                        (Just n,  q') -> case eval y q' of
                                        (Just m,  q'') -> (Just (n + m), q'')
                                        (Nothing, q'') -> (Nothing,      q'')
                        (Nothing, q') -> (Nothing, q')
eval Throw       q = (Nothing, q)
eval (Catch x h) q = case eval x q of
                        (Just n,  q') -> (Just n, q')
                        (Nothing, q') -> eval h q'
eval Get         q = (Just q, q)
eval (Put   x y) q = case eval x q of
                        (Just n,  _)  -> eval y n
                        (Nothing, q') -> (Nothing, q')

type Conf = (Stack, State)

type Stack = [Elem]

-- exec (comp' x c) (s, q) = case eval x q of
--                              (Just n,  q') -> exec c (VAL n : s, q')
--                              (Nothing, q') -> fail (s, q')

--   exec (comp' (VAL n) c) (s, q)
-- =    { specification exec }
--   exec c (VAL n : s, q)
-- =    { define: exec (PUSH n c) (s, q) = exec c (VAL n : s, q) }
--   exec (PUSH n c) (s, q)

--   exec (comp' Throw c) (s, q)
-- =    { specification exec }
--   fail (s, q)
-- =    { define: exec FAIL (s, q) = fail (s, q) }
--   exec FAIL (s, q)

--   exec (comp' (Add x y) c) (s, q)
-- =    { specification exec }
--   case eval x q of
--      (Just n,  q') -> case eval y q' of
--                          (Just m,  q'') -> exec c (VAL (n + m) : s, q'')
--                          (Nothing, q'') -> fail (s, q'')
--      (Nothing, q') -> fail (s, q')
-- =    { define: exec (ADD c) (VAL m : VAL n : s, q) = exec c (VAL (n + m) : s, q) }
--   case eval x q of
--      (Just n,  q') -> case eval y q' of
--                          (Just m,  q'') -> exec (ADD c) (VAL m : VAL n : s, q'')
--                          (Nothing, q'') -> fail (s, q'')
--      (Nothing, q') -> fail (s, q')
-- =    { define: fail (VAL n : s, q) = fail (s, q) }
--   case eval x q of
--      (Just n,  q') -> case eval y q' of
--                          (Just m,  q'') -> exec (ADD c) (VAL m : VAL n : s, q'')
--                          (Nothing, q'') -> fail (VAL n : s, q'')
--      (Nothing, q') -> fail (s, q')
-- =    { induction hypothesis for y }
--   case eval x q of
--      (Just n,  q') -> exec (comp' y (ADD c)) (VAL n : s, q')
--      (Nothing, q') -> fail (s, q')
-- =    { induction hypothesis for x }
--   exec (comp' x (comp' y (ADD c))) (s, q)

--   exec (comp' (Catch x h) c) (s, q)
-- =    { specification exec }
--   case eval x q of
--      (Just n,  q') -> exec c (VAL n : s, q')
--      (Nothing, q') -> case eval h q' of
--                          (Just m,  q'') -> exec c (VAL m : s, q'')
--                          (Nothing, q'') -> fail (s, q'')
-- =    { induction hypothesis for h }
--   case eval x q of
--      (Just n,  q') -> exec c (VAL n : s, q')
--      (Nothing, q') -> exec (comp' h c) (s, q')
-- =    { define: fail (HAN h : s, q) = exec h (s, q) }
--   case eval x q of
--      (Just n,  q') -> exec c (VAL n : s, q')
--      (Nothing, q') -> fail (HAN (comp' h c) : s, q)
-- =    { define: exec (UNMARK c) (VAL n : HAN _ : s, q) = exec c (VAL n : s, q) }
--   case eval x q of
--      (Just n,  q') -> exec (UNMARK c) (VAL n : HAN (comp' h c) : s, q')
--      (Nothing, q') -> fail (HAN (comp' h c) : s, q')
-- =    { induction hypothesis for x }
--   exec (comp' x (UNMARK c)) (HAN (comp' h c) : s, q)
-- =    { define : exec (MARK c' c) (s, q) = exec c (HAN c' : s, q) }
--   exec (MARK (comp' h c) (comp' x (UNMARK c))) (s, q)

--   exec (comp' Get c) (s, q)
-- =    { specification exec }
--   exec c (VAL q : s, q)
-- =    { define: exec (LOAD c) (s, q) = exec c (VAL q : s, q) }
--   exec (LOAD c) (s, q)

--   exec (comp' (Put x y) c) (s, q)
-- =    { specification exec }
--   case eval x q of
--      (Just n, q')  -> case eval y n of
--                          (Just m,  q'') -> exec c (VAL m : s, q'')
--                          (Nothing, q'') -> fail (s, q'')
--      (Nothing, q') -> fail (s, q')
-- =    { induction hypothesis for y }
--   case eval x q of
--      (Just n,  q') -> exec (comp' y c) (s, n)
--      (Nothing, q') -> fail (s, q')
-- =    { define: exec (SAVE c') (VAL n : s,, q') = exec c' (s, n) }
--   case eval x q of
--      (Just n,  q') -> exec (SAVE (comp' y c)) (VAL n : s, q')
--      (Nothing, q') -> fail (s, q')
-- =    {induction hypothesis for x }
--   exec (comp' x (SAVE (comp' y c))) (s, q)

-- exec (comp e) (s, q) = case eval e q of
--                          (Just n,  q') -> (VAL n : s, q')
--                          (Nothing, q') -> fail (s, q')

--   exec (comp e) (s, q)
-- =    { specification exec }
--   case eval e q of
--      (Just n,  q') -> (VAL n : s, q')
--      (Nothing, q') -> fail (s, q')
-- =    { define: exec HALT (s, q) = (s, q) }
--   case eval e q of
--      (Just n,  q') -> exec HALT (VAL n : s, q')
--      (Nothing, q') -> fail (s, q')
-- =    { specification exec }
--   exec (comp' e HALT) s

data Code = HALT | PUSH Int Code  | ADD Code | 
            FAIL | MARK Code Code | UNMARK Code |
            LOAD Code | SAVE Code

comp   :: Expr -> Code
comp x = comp' x HALT

comp'               :: Expr -> Code -> Code
comp' (Val   n)   c = PUSH n c
comp' (Add   x y) c = comp' x (comp' y (ADD c))
comp' Throw       _ = FAIL 
comp' (Catch x h) c = MARK (comp' h c) (comp' x (UNMARK c))
comp' Get         c = LOAD c
comp' (Put   x y) c = comp' x (SAVE (comp' y c))

data Elem = VAL Int | HAN Code

exec :: Code -> Conf -> Conf
exec HALT       (s, q)                 = (s, q)
exec (PUSH n c) (s, q)                 = exec c (VAL n : s, q)
exec (ADD c)    (VAL m : VAL n : s, q) = exec c (VAL (n + m) : s, q)
exec FAIL       (s, q)                 = fail (s, q)
exec (MARK h c) (s, q)                 = exec c (HAN h : s, q)
exec (UNMARK c) (VAL n : HAN _ : s, q) = exec c(VAL n : s, q)
exec (LOAD   c) (s, q)                 = exec c (VAL q : s, q)
exec (SAVE   c) (VAL n : s, _)         = exec c (s, n)

fail :: Conf -> Conf
fail ([], q)        = ([], q)
fail (VAL _ : s, q) = fail (s, q)
fail (HAN h : s, q) = exec h (s, q)
